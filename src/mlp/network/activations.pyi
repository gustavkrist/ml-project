from __future__ import annotations

from typing import Any, TypeVar, overload

import numpy as np
import numpy.typing as npt

from mlp.types import ScalarArray

T = TypeVar("T", bound=npt.NBitBase)

@overload  # noqa: E302
def relu(x: npt.NDArray[np.floating[Any]]) -> npt.NDArray[np.float_]: ...
@overload
def relu(x: npt.NDArray[np.integer[T]]) -> npt.NDArray[np.integer[T]]: ...
def relu_der(x: ScalarArray) -> npt.NDArray[np.int_]: ...
def leaky_relu(x: ScalarArray) -> ScalarArray: ...
def leaky_relu_der(x: ScalarArray) -> ScalarArray: ...
@overload
def sigmoid(x: npt.NDArray[np.floating[Any]]) -> npt.NDArray[np.float_]: ...
@overload
def sigmoid(x: npt.NDArray[np.integer[Any]]) -> npt.NDArray[np.float_]: ...
@overload
def sigmoid_der(x: npt.NDArray[np.floating[Any]]) -> npt.NDArray[np.float_]: ...
@overload
def sigmoid_der(x: npt.NDArray[np.integer[Any]]) -> npt.NDArray[np.float_]: ...
@overload
def softmax(x: npt.NDArray[np.floating[Any]]) -> npt.NDArray[np.float_]: ...
@overload
def softmax(x: npt.NDArray[np.integer[Any]]) -> npt.NDArray[np.float_]: ...
